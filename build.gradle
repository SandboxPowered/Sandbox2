buildscript {
	repositories {
		maven {
			url "https://maven.modded-mc.com/repository/maven-public/"
		}
		google()
	}

	dependencies {
		classpath 'com.guardsquare:proguard-gradle:7.1.0'
	}
}

plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
	id 'org.jetbrains.kotlin.jvm' version '1.5.20'
	id "org.graalvm.plugin.compiler" version "0.1.0-alpha2"
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

String graalVersion = '21.1.0'

graal {
	version graalVersion
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

	implementation group: 'com.electronwill.night-config', name: 'toml', version: '3.6.3'
	implementation "org.graalvm.sdk:graal-sdk:$graalVersion"
	implementation "org.graalvm.js:js:$graalVersion"
	// necessary to integrate with legacy ScriptEngine based implementation
	implementation "org.graalvm.js:js-scriptengine:$graalVersion"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	it.options.release = 16
}

java {
	withSourcesJar()
	toolchain {
		languageVersion = JavaLanguageVersion.of(16)
		vendor = JvmVendorSpec.ADOPTOPENJDK
	}
}

compileKotlin {
	kotlinOptions {
		jvmTarget = JavaLanguageVersion.of(16)
	}
}
compileTestKotlin {
	kotlinOptions {
		jvmTarget = JavaLanguageVersion.of(16)
	}
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {

	}
}

task ('proguard', type: proguard.gradle.ProGuardTask) {
		configuration './proguard.conf'
		verbose
		injars  project.buildDir.toString() + '/libs/' + archivesBaseName + "-" + project.mod_version + ".jar"
		outjars project.buildDir.toString() + '/libs/' + archivesBaseName + "-" + project.mod_version + "-min.jar"
		printmapping 'out.map'
		keepparameternames
		renamesourcefileattribute 'SourceFile'
		keepattributes 'Signature,Exceptions,InnerClasses,PermittedSubclasses,EnclosingMethod,Deprecated,SourceFile,LineNumberTable'
		keepattributes '*Annotation*'

		keepclassmembernames 'class * { \
        	java.lang.Class class$(java.lang.String); \
        	java.lang.Class class$(java.lang.String, boolean); \
    	}'

		keepclassmembers 'class * { \
			@net.minecraft.obfuscate.DontObfuscate public *; \
			@org.graalvm.polyglot.HostAccess.Export public *; \
		}'

		keepclassmembers 'class org.sandboxpowered.fabric.mixin.* { \
        	<fields>; \
        	<init>(); \
        	<methods>; \
    	}'
}

remapJar.finalizedBy proguard
